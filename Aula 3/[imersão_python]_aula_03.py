# -*- coding: utf-8 -*-
"""[Imersão Python] Aula 03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oFfmGbYhYzb3OObHTGx8OoE-LYxHpI3W

Aula 2 - Imersão Python_
"""

import pandas as pd

df_principal = pd.read_excel("_Imersão Python - Desafio 2.xlsx", sheet_name="Principal")
df_principal

df_total_acoes = pd.read_excel("_Imersão Python - Desafio 2.xlsx", sheet_name="Total_de_acoes")
df_total_acoes

df_ticker = pd.read_excel("_Imersão Python - Desafio 2.xlsx", sheet_name="Ticker")
df_ticker

df_chatgpt = pd.read_excel("_Imersão Python - Desafio 2.xlsx", sheet_name="ChatGPT")
df_chatgpt

"""AULA 3  - Imersão Python_"""

df_principal = df_principal[['Ativo','Data' ,'Último (R$)','Var. Dia (%)']].copy()
df_principal

df_principal = df_principal.rename(columns={'Último (R$)':'valor_final'	, 'Var. Dia (%)':'var_dias_pct'}).copy()
df_principal

df_principal['var_pct'] = df_principal['var_dias_pct']/100
df_principal['valor_ini'] = df_principal['valor_final'] / (df_principal['var_pct'] + 1)
df_principal

df_principal = df_principal.merge(df_total_acoes, left_on='Ativo' , right_on='Código', how='left')
df_principal

df_principal = df_principal.drop(columns=['Código'])
df_principal

df_principal['varicao_rs'] = (df_principal['valor_final'] - df_principal['valor_ini']) * df_principal['Qtde. Teórica']
df_principal

pd.options.display.float_format = '{:.2f}'.format

df_principal['Qtde. Teórica'] = df_principal['Qtde. Teórica'].astype(int)
df_principal

df_principal = df_principal.rename(columns={'Qtde. Teórica':'Qtd_teorica'}).copy()
df_principal

df_principal['Resultado'] = df_principal['varicao_rs'].apply(lambda x: 'Subiu' if x > 0 else ('Desceu' if x < 0 else 'Estável'))
df_principal

df_principal = df_principal.merge(df_ticker, left_on='Ativo', right_on='Ticker', how='left')
df_principal = df_principal.drop(columns=['Ticker'])
df_principal

df_principal = df_principal.merge(df_chatgpt, left_on='Nome', right_on='Nome da Empresa', how='left')
df_principal = df_principal.drop(columns=['Nome da Empresa'])
df_principal

df_principal = df_principal.rename(columns={'Idade (anos)':'Idade'}).copy()
df_principal

df_principal['Cat_idade'] = df_principal['Idade'].apply(lambda x: 'Mais de 100' if x > 100 else ('Menos de 50' if x < 50 else 'Entre 50 e 100'))
df_principal

# Calculando o maior valor
maior = df_principal['varicao_rs'].max()

# Calculando o menor valor
menor = df_principal['varicao_rs'].min()

# Calculando a média
media = df_principal['varicao_rs'].mean()

# Calculando a média de quem subiu
media_subiu = df_principal[df_principal['Resultado'] == 'Subiu']['varicao_rs'].mean()

# Calculando a média de quem desceu
media_desceu = df_principal[df_principal['Resultado'] == 'Desceu']['varicao_rs'].mean()

# Imprimindo os resultados
print(f"Maior\tR$ {maior:,.2f}")
print(f"Menor\tR$ {menor:,.2f}")
print(f"Média\tR$ {media:,.2f}")
print(f"Média de quem subiu\tR$ {media_subiu:,.2f}")
print(f"Média de quem desceu\tR$ {media_desceu:,.2f}")

df_principal_subiu = df_principal[df_principal['Resultado'] == 'Subiu']
df_principal_subiu

df_analise_segmento = df_principal_subiu.groupby('Segmento')['varicao_rs'].sum().reset_index()
df_analise_segmento

df_analise_saldo = df_principal.groupby('Resultado')['varicao_rs'].sum().reset_index()
df_analise_saldo

import plotly.express as px

fig = px.bar(df_analise_saldo, x='Resultado', y='varicao_rs', text='varicao_rs', title='Variação em Reais por Resultado')
fig.show()

"""# DESAFIO AULA 3"""

fig = px.bar(df_analise_saldo, x='Resultado', y='varicao_rs', text='varicao_rs', title='Variação em Reais por Resultado')
fig.update_traces(texttemplate='R$ %{text:,.2f}', textposition='outside')
fig.show()

fig = px.pie(df_analise_segmento, names='Segmento', values='varicao_rs', title='Variação Reais por Segmento')
fig.show()

df_analise_cat_idade = df_principal.groupby('Cat_idade')['varicao_rs'].sum().reset_index()
df_analise_cat_idade

fig = px.bar(df_analise_cat_idade, x='Cat_idade', y='varicao_rs', text='varicao_rs', title='Variação Reais por Categoria de Idade')
fig.update_traces(texttemplate='R$ %{text:,.2f}', textposition='outside')
fig.show()